@inherits LayoutComponentBase


@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage

@using A70Insurance.StyleFeature

@inject IScreenStyleManager screenStyleManager;
@inject IScreenStyleFactory screenStyleFactory;
@inject IScreenStyleList screenStyleList;

@implements IDisposable;
@inject NavigationManager navigationManager;

@using A70Insurance.Pages;

@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage
 

<style>
    a {
        color: white;
        font-size: larger;
        margin-left: 50px;
    } 

    a:hover {
        color: burlywood;
        font-size: larger;
    }

    .out {
        color: lightgray
    }

    .in {
        color: gold
    }

    .b4 {
        background-color: black;
        color: white;
        font-size: larger;
        border: none
    }

    .isfixed {
        background-attachment: fixed;
        z-index: 1;
    }

    .a1 { margin-left: 140px; }

    .a2 { margin-left: 150px; }

    .linkleft { margin-left: 150px; }

    .n1 { color: white; font-size: larger;}

    
    .n2 { color: burlywood; font-size: larger;}

    .n3 {
        color: white;
        font-size: larger;
        margin-left: 75px;
    }
     

</style>

<div class="page"> 

    <main>

        <nav class="navbar navbar-expand-lg bg-body-tertiary isfixed bg-dark">
            <div class="container-fluid">
                <a class="n2 navbar-brand" href="#">A70Insurance</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div  class="linkleft collapse navbar-collapse" id="navbarNavAltMarkup">
                    <div class="navbar-nav"> 

                        @if (signedIn == false)
                        { 
                            <a class="n1 nav-link" href="/Index">Start</a>
                            <a class="n1 nav-link" href="/Classic">Classic</a>
                            <a class="n1 nav-link" href="/Register">Register</a>
                            <a class="n1 nav-link" href="/Signin">Sign In</a>
                            <a class="n1 nav-link" href="/About">About</a>
                            <a class="n1 nav-link" href="/Admin">Admin</a>
                        }
                        
                        @if (signedIn == true)
                        { 
                            <a class="n3 nav-link" href="/menu">Menu</a>
                            <a class="n3 nav-link" href="/update">Update</a> 
                            <a class="n3 nav-link" href="/claim">Claim</a> 
                            <a class="n3 nav-link" href="/history">History</a>
                            @if (showStyleLink)
                            {
                                <button @onclick="NextStyle" 
                                        class="n3 b4">@internalClass</button>
                            }

                            @if (showColorLink)
                            {
                                <button @onclick="NextColor" style="@colorLinkStyle" 
                                        class="n3 b4">@colorLinkColor</button>
                            }

                            <a href="#" @onclick="signoutCustomer" 
                               class="n3 nav-link">Sign Out</a> 
                        }

                        <a href="/" class="@at n3 nav-link" 
                           style="color:burlywood">@info</a>


                    </div>
                </div>
            </div>
        </nav>

        <div class="content px-4">


            <CascadingValue Value=SignChange>


                @Body


            </CascadingValue>

        </div>


    </main>
</div>

            
@code { 

    public string info = "Signed Out";
    public string at = "out";

    private bool signedIn = false;
    private string custFirst = "";
    private string custLast = "";
    private string custId = "";
    private bool showStyleLink = false;
    private bool showColorLink = false;
    private String colorLinkStyle = "color:white";
    private String colorLinkColor = "white";
    private String externalClass = "Style";
    private String internalClass = "Style";
    private String currentScreen = "";
    private String fullScreenPath = "";
    private String slash = "/";
    public String callback = "";



    EventCallback<string> SignChange => EventCallback.Factory.Create<string>(this, SignedInChange);

    EventCallback<string> StyleChange => EventCallback.Factory.Create<string>(this, NextStyle);

    EventCallback<string> ColorChange => EventCallback.Factory.Create<string>(this, NextColor);


    protected override void OnInitialized()
    {

        // subscribe to location changed event.

        navigationManager.LocationChanged += HasLocationChanged;

    }


    public void ScreenRefreshAssignment(Object o)
    {
        // when update or claim component starts
        // the localrefresh screen function is passed here
        // to be used when style or color changes.

        StateHasChanged();

    }


    private void HasLocationChanged(Object sender, LocationChangedEventArgs e)
    {

        var location = e.Location;

        this.fullScreenPath = location;

        var result = GetTheScreen(location);
        if (result == "invalid")
        {
            navigationManager.NavigateTo(slash);
        }
        this.currentScreen = result;

        // did we move - only come here once.

        var lastLocation = this.sessionStorage.GetItem<String>("LastLocation") as String;
        var newLocation = lastLocation == null || this.currentScreen != lastLocation;

        if (newLocation)
        {

            // remember location
            this.sessionStorage.SetItem<String>("LastLocation", this.currentScreen);

            UpdateStyleAndColor();

            StateHasChanged();

        }

    }

    protected String GetTheScreen(String location)
    {
        var value = "";
        var indexOfLastSlash = location.LastIndexOf(slash);
        var notfound = -1;
        var withinbounds = location.Length - 01;
        if (indexOfLastSlash > notfound && indexOfLastSlash < withinbounds)
        {
            value = location.Substring(indexOfLastSlash + 01);
        }
        if (value == "")
        {
            return "invalid";
        }
        return value;
    }

    void IDisposable.Dispose()
    {
        // unsubscribe
        navigationManager.LocationChanged -= HasLocationChanged;
    }



    public void SignedInChange(string action)
    {

        bool signin = (action == "in") ? true : false;

        signedIn = signin;

        if (signin)
        {

            custFirst = sessionStorage.GetItem<string>("custFirst");
            custLast = sessionStorage.GetItem<string>("custLast");
            custId = sessionStorage.GetItem<string>("custId");

            custId = custId.Trim();
            custFirst = custFirst.Trim();
            custLast = custLast.Trim();

            info = custId + " " + custFirst + " " + custLast;
            at = "in";

        }
        else
        {
            info = "Signed Out";
            at = "out";
        }

        StateHasChanged();



    }



    public void NextStyle()
    {


        // get next style for screen
        screenStyleFactory.getNextStyle(ifscreenName: this.currentScreen);

        // update navigation links
        UpdateStyleAndColor();

        // persist the style list
        // todo: be peristent here !!
        sessionStorage.SetItem("screenStyleList", screenStyleList.getScreenStyleList());


        StateHasChanged();
    }


    public void NextColor()
    {


        // get next style for screen
        screenStyleFactory.getNextColor(ifscreenName: this.currentScreen);


        // update navigation links
        UpdateStyleAndColor();

        // persist the style list
        // todo: be peristent here !!
        sessionStorage.SetItem("screenStyleList", screenStyleList.getScreenStyleList());


        StateHasChanged();
    }


    private void UpdateStyleAndColor()
    {


        // determin if style and color links should be showwn.

        colorLinkColor = "n/a";
        showStyleLink = false;
        showColorLink = false;

        var usesStyles = screenStyleManager.AreStylesActive(this.currentScreen);
        if (usesStyles)
        {
            showStyleLink = true;

            // now, are colors being used as current style if yes show color link and color the link.

            // * important: each screen using the style feature is required
            // * to reload the style list from tempdata
            // * that happens before this code is exectuted so the screenstyle list
            // * will be ready to search.

            ScreenStyleObject screenStyleObject = screenStyleFactory.getCurrentStyleForScreen(ifscreenName: currentScreen);
            if (screenStyleObject != null)
            {
                internalClass = screenStyleObject.internalClass;
                externalClass = screenStyleObject.externalClass;
                //
                showColorLink = (internalClass == "Outline" || internalClass == "Solid");
                if (showStyleLink)
                {

                    colorLinkColor = screenStyleObject.userColor;
                    colorLinkStyle = "margin-left: 60px;";
                    colorLinkStyle += $"color:" + screenStyleObject.userColor + ";";
                }
            }
            else
            {
                showColorLink = false;
            }
        }
    }


    private void signoutCustomer()
    {

        sessionStorage.SetItem("custId", ""); // signout customer for back door checking
        SignedInChange("out");
    }

}