using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using A60Insurance.Models;

namespace A60Insurance.Helper
{
    public class EditDate
    {

        private int CurrentYear = 0;
        private int currentCentury = 0;
        private int currentYear2Digits = 0; 

        public void EditTheDate(DateParm dateParm)
        {
            SetUp(dateParm);
            if(dateParm.Valid == false)
            {
                return;
            }

        }

        protected void SetUp(DateParm dateParm)
        {
            // edit screen
            var validScreen = dateParm.Screen == "register"
                           || dateParm.Screen == "update"
                           || dateParm.Screen == "claim";

            if (!validScreen)
            {

                dateParm.Message = "invalid screen type.";
                dateParm.Valid = false;

            }
        }

        protected string AddCentury() 
        {
            return "";
        }

        protected string IntakeSlashes()
        {
            return "";
        }

        protected bool EditMonth(string input)
        { 
            var month = int.Parse(input);
            var monthValid = month >= 1 && month <= 12;
            return monthValid; 
        }

        protected bool EditDay(string mm, string dd, string yy)
        { 

            int [] thirtyMonth  = { 4, 6, 9, 11 };
            var day = int.Parse(dd);
            var month = int.Parse(mm);
            var year = int.Parse(yy);
            const int feb  = 2; 
             
            var dayLimit = 31;

            if (Array.IndexOf(thirtyMonth, mm) > -1) 
            {
                dayLimit = 30;
            }
            if (month == feb)
            { 
                dayLimit = (year % 4 == 0) ? 29 : 28;
            }
            var dayValid = (day > 0 && day <= dayLimit);
            return dayValid;
        }

        protected bool EditYear(string input, string FromScreen)
        {
            var year = int.Parse(input);
            // reasonable check only.
            var len = input.Length;
            var validLength = len === 2 || len === 4;
            if (!validLength) { return false; }
            const int centuryOmitted = 2;

            if (len == centuryOmitted)
            {

                // registration can be any year since it is birth date
                // claim dates can be +1/-1 current year only
                // correspond with screen input...
                if (FromScreen == "claim" && (year < 19 || year > 21))
                {
                    return false;
                }
                return true;

            }

            const int dateIncludesCentury = 4;
            if (len == dateIncludesCentury)
            { 
                const int earlyLimit = 1900;
                var currentYear = this.CurrentYear;
                var lastYear = currentYear - 1;
                var nextYear = currentYear + 1;
                // procedure dates
                if (FromScreen == "claim" && (year < lastYear || year > nextYear))
                {
                    return false;
                }
                // birth date
                if ((FromScreen == "register" || FromScreen == "update")
                   && (year < earlyLimit || year > currentYear))
                {
                    return false;
                }
                return true;
            }

        }
    }


    }
}
